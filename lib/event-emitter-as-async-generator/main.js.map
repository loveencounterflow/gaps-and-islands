{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/event-emitter-as-async-generator/main.coffee"
  ],
  "names": [],
  "mappings": "AAIA;EAAA;AAAA,MAAA,GAAA,EAAA,UAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,KAAA,EAAA,aAAA,EAAA,IAAA,EAAA,MAAA,EAAA,sBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,YAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAf5B;;;EAiBA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,sBAAR;;EAC5B,CAAA,CAAE,MAAF,CAAA,GAA4B,MAA5B,EApBA;;;;;;;;;;;;;;;EAsCA,sBAAA,GAAyB,QAAA,CAAE,KAAF,CAAA;WAAa,IAAI,OAAJ,CAAY,CAAE,IAAF,CAAA,GAAA;AAClD,UAAA,KAAA,EAAA;MAAE,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,CAAA,6BAAA,CAAA,CAAgC,GAAA,CAAI,KAAJ,CAAhC,CAAA,EAAA,CAArB;MACA,KAAA,GAAQ,QAAA,CAAE,GAAF,CAAA;eAAW,IAAI,OAAJ,CAAY,CAAE,IAAF,CAAA,GAAA;iBAAY,UAAA,CAAW,IAAX,EAAiB,GAAA,GAAM,IAAvB;QAAZ,CAAZ;MAAX;MACR,IAAA,GAAQ,CAAA,yBAAA;MACR,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;eAAkC,CAAA,KAAA,CAAA,CAAA,GAAA;AACpC,cAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;UAAI,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,MAAA,GAAS,IAA9B;UACA,KAAA,GAAQ,IAAI,CAAC,KAAL,CAAW,KAAX;UACR,KAAA,uCAAA;;YACE,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,IAArB;YACA,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,IAArB;YACA,IAAG,KAAA,KAAW,CAAd;cACE,MAAM,KAAA,CAAM,KAAN,EADR;;UAHF;UAKA,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,IAArB;iBACA,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,qCAArB;QATgC,CAAA,IAAlC;;IAJgD,CAAZ;EAAb,EAtCzB;;;;;EAyDM,aAAN,MAAA,WAAA,CAAA;IACE,WAAa,CAAA,CAAA;MACX,IAAC,CAAA,SAAD,GAAwB;MACxB,IAAC,CAAE,MAAM,CAAC,QAAT,CAAD,GAAwB,SAAA,CAAA,CAAA;QAAG,OAAW,IAAC,CAAA;eAAW,IAAC,CAAA,SAAD,GAAa;MAAvC;MACxB,IAAC,CAAA,QAAD,GAAwB,QAAA,CAAA,CAAA,EAAA;MACxB,IAAC,CAAA,IAAD,GAAwB;MACxB,IAAC,CAAA,IAAD,GAAwB,KAAK,CAAC,IAAN,CAAW,IAAX;MACxB,IAAC,CAAA,OAAD,GAAwB,QAAQ,CAAC,IAAT,CAAc,IAAd;MACxB,IAAC,CAAA,OAAD,GAAwB,IAAI,OAAJ,CAAY,CAAE,OAAF,CAAA,GAAA;eAAe,IAAC,CAAA,QAAD,GAAY;MAA3B,CAAZ;AACxB,aAAO;IARI;;EADf,EAzDA;;;EAoEA,KAAA,GAAY,QAAA,CAAE,CAAF,CAAA;WAAS,IAAC,CAAA,SAAS,CAAC,IAAX,CAAgB,CAAhB;EAAT;;EACZ,QAAA,GAAY,QAAA,CAAE,QAAQ,IAAV,CAAA;IACV,IAAC,CAAA,IAAD,GAAY,CAAI;IAChB,IAAC,CAAA,QAAD,CAAA;WACA,IAAC,CAAA,OAAD,GAAY,IAAI,OAAJ,CAAY,CAAE,OAAF,CAAA,GAAA;aAAe,IAAC,CAAA,QAAD,GAAY;IAA3B,CAAZ;EAHF,EArEZ;;;;;EA8EA,YAAA,GAAe,MAAA,SAAA,CAAE,KAAF,CAAA;AACf,QAAA,CAAA,EAAA,EAAA,EAAA,WAAA,EAAA;IAAE,CAAA,CAAE,KAAF,CAAA,GAAY,OAAA,CAAQ,eAAR,CAAZ;IACA,CAAA,GAAgB,IAAI,UAAJ,CAAA;IAChB,EAAA,GAAgB,KAAA,CAAM,MAAN,EAAc,CAAE,UAAF,EAAc,UAAd,EAA0B,SAA1B,EAAqC,CAAA,CAAA,CAAG,KAAH,CAAA,CAArC,CAAd,EAFlB;;IAIE,WAAA,GAAc,QAAA,CAAE,IAAF,CAAA;AACZ,aAAO,CAAE,MAAF,CAAA,GAAA;QACL,CAAC,CAAC,IAAF,CAAO,MAAA,CAAO,CAAE,IAAF,EAAQ,MAAR,CAAP,CAAP;eACA,CAAC,CAAC,OAAF,CAAA;MAFK;IADK,EAJhB;;IASE,EAAE,CAAC,MAAM,CAAC,EAAV,CAAc,MAAd,EAAsB,WAAA,CAAY,SAAZ,CAAtB;IACA,EAAE,CAAC,MAAM,CAAC,EAAV,CAAc,MAAd,EAAsB,WAAA,CAAY,SAAZ,CAAtB;IACA,EAAE,CAAC,EAAH,CAAM,OAAN,EAAe,CAAA,CAAA,GAAA;MACb,IAAA,CAAK,4BAAL;aACA,CAAC,CAAC,OAAF,CAAU,KAAV;IAFa,CAAf,EAXF;;IAeE,EAAE,CAAC,EAAH,CAAM,OAAN,EAAe,QAAA,CAAE,KAAF,CAAA;AACjB,UAAA;MAAI,IAAG,YAAH;QACE,IAAA,CAAK,KAAL;AACA,eAAO,KAFT;;MAGA,YAAA,GAAe;MACf,IAAA,CAAK,+BAAL;aACA,YAAA,CAAa,KAAb;IANa,CAAf,EAfF;;AAuBE,WAAM,CAAI,CAAC,CAAC,IAAZ;MACE,MAAM,CAAC,CAAC;MAAS,OAAW;IAD9B;IAEA,IAAA,CAAK,+BAAL;AACA,WAAO;EA3BM,EA9Ef;;;EA4GA,aAAA,GAAgB,QAAA,CAAE,KAAF,CAAA;WAAa,IAAI,OAAJ,CAAY,KAAA,CAAE,aAAF,EAAiB,YAAjB,CAAA,GAAA;AACzC,UAAA,CAAA,EAAA,MAAA,EAAA,eAAA,EAAA,MAAA,EAAA,EAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,EAAA,CAAA;;MACE,EAAA,GAAK,OAAA,CAAQ,YAAR;MACL,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,CAAA,GAEc,EAAE,CAAC,MAAH,CAAA,CAFd,EAFF;;MAME,eAAA,GAAkB,QAAA,CAAA,CAAA;AACpB,YAAA,IAAA,EAAA;QAAI,WAAA,GAAc,CAAA;QACd,IAAA,GAAc,MAAA,CAAO,MAAP;AACd,eAAO,CAAA,CAAE,CAAE,IAAF,CAAF,EAAa,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;AACxB,cAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA;UAAM,KAAA,CAAM,QAAN,EAAgB,CAAhB;UACA,CAAA,CAAE,IAAF,EAAQ,MAAR,CAAA,GAAoB,CAApB;UACA,IAAO,iCAAP;YACE,GAAA,GAAM,WAAW,CAAE,IAAF,CAAX,GAAsB,EAAE,CAAC,WAAH,CAAA,EAD9B;;UAEA,IAAG,CAAA,KAAK,IAAR;AACE;YAAA,KAAA,aAAA;cAAA,IAAA,CAAO,MAAA,CAAO,CAAE,IAAF,EAAQ,MAAR,CAAP,CAAP;YAAA;AACA,mBAAO,KAFT;;AAGA;UAAA,KAAA,cAAA;YAAA,IAAA,CAAO,MAAA,CAAO,CAAE,IAAF,EAAQ,MAAR,CAAP,CAAP;UAAA;AACA,iBAAO;QATW,CAAb;MAHS,EANpB;;MAoBE,MAAA,GAAc,EAAE,CAAC,eAAH,CAAA;MACd,QAAA,GAAc;MACd,QAAQ,CAAC,IAAT,CAAc,MAAd;MACA,QAAQ,CAAC,IAAT,CAAc,eAAA,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAE,CAAF,CAAA;eAAS,IAAA,CAAK,CAAL;MAAT,CAAP,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAA,CAAA;QACnB,IAAA,CAAK,2BAAL;AACA,eAAO,aAAA,CAAA;MAFY,CAAP,CAAd;MAGA,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AAEA;;MAAA,oBAAA,EAAA;;QAEE,MAAM,CAAC,IAAP,CAAY,CAAZ;MAFF;MAGA,OAAA,CAAQ,6BAAR;MACA,MAAM,CAAC,GAAP,CAAA;AACA,aAAO;IApCgC,CAAZ;EAAb,EA5GhB;;;EAmJA,GAAA,GAAM,QAAA,CAAA,CAAA;WAAG,IAAI,OAAJ,CAAY,CAAE,IAAF,CAAA,GAAA;AACrB,UAAA,OAAA,EAAA,MAAA;;MACE,MAAA,GAAS,KAAA,CAAE,CAAF,CAAA,GAAA;AACX,YAAA,KAAA,EAAA;QAAI,KAAA,sDAAqC;AACrC,gBAAO,CAAC,CAAC,OAAO,CAAC,GAAjB;AAAA,eACO,UADP;YACuB,MAAM,sBAAA,CAAuB,KAAvB;AAAtB;AADP,eAEO,SAFP;YAEuB,MAAM,aAAA,CAAc,KAAd;AAAtB;AAFP;YAGO,MAAM,IAAI,KAAJ,CAAU,CAAA,4BAAA,CAAA,CAA+B,GAAA,CAAI,CAAC,CAAC,OAAO,CAAC,GAAd,CAA/B,CAAA,CAAV;AAHb;eAIA,IAAA,CAAA;MANO,EADX;;MASE,OAAA,GACE;QAAA,QAAA,EAEE,CAAA;;UAAA,UAAA,EACE;YAAA,WAAA,EAAc,8CAAd;YACA,KAAA,EACE;cAAA,OAAA,EAAU;gBAAE,KAAA,EAAO,GAAT;gBAAc,IAAA,EAAM,MAApB;gBAA4B,WAAA,EAAa;cAAzC;YAAV,CAFF;YAGA,MAAA,EAAQ;UAHR,CADF;;UAMA,SAAA,EACE;YAAA,WAAA,EAAc,+CAAd;YACA,KAAA,EACE;cAAA,OAAA,EAAU;gBAAE,KAAA,EAAO,GAAT;gBAAc,QAAA,EAAU,IAAxB;gBAA8B,IAAA,EAAM,MAApC;gBAA4C,WAAA,EAAa;cAAzD;YAAV,CAFF;YAGA,MAAA,EAAQ;UAHR;QAPF;MAFF,EAVJ;;MAwBE,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,OAAO,CAAC,IAA1B;AACA,aAAO;IA1BY,CAAZ;EAAH,EAnJN;;;EAgLA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA,EAAA;;aAEhC,CAAA,MAAM,GAAA,CAAA,CAAN;IAFgC,CAAA,IAAlC;;AAhLA",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'EVENTS-AS-GENERATOR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype()\nMIXA                      = require 'mixa'\nSL                        = require 'intertext-splitlines'\n{ freeze, }               = Object\n\n\n### thx to https://stackoverflow.com/a/59347615/7568091\n\nSeems to be working so far.\n\ni.e. you create a dummy promise like in Khanh's solution so that you can wait for the first result, but then\nbecause many results might come in all at once, you push them into an array and reset the promise to wait\nfor the result (or batch of results). It doesn't matter if this promise gets overwritten dozens of times\nbefore its ever awaited.\n\nThen we can yield all the results at once with yield* and flush the array for the next batch.\n\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\ngenerate_lines_of_text = ( delay ) -> new Promise ( done ) =>\n  process.stdout.write \"generating lines with delay: #{rpr delay}\\n\"\n  sleep = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n  text  = \"\"\"just a generator demo ###\"\"\"\n  if module is require.main then do =>\n    process.stdout.write 'helo' + '\\n'\n    words = text.split /\\s+/\n    for word in words\n      process.stdout.write '\\n'\n      process.stdout.write word\n      if delay isnt 0\n        await sleep delay\n    process.stdout.write '\\n'\n    process.stderr.write \"and hello over the other channel!\\n\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Controller # extends Object\n  constructor: ->\n    @collector            = []\n    @[ Symbol.iterator ]  = -> yield from @collector; @collector = []\n    @_resolve             = ->\n    @done                 = false\n    @send                 = _send.bind @\n    @advance              = _advance.bind @\n    @ratchet              = new Promise ( resolve ) => @_resolve = resolve\n    return null\n#...........................................................................................................\n_send     = ( d ) -> @collector.push d\n_advance  = ( go_on = true ) ->\n  @done     = not go_on\n  @_resolve()\n  @ratchet  = new Promise ( resolve ) => @_resolve = resolve\n\n\n#===========================================================================================================\n#\n#---------------------------------------------------------------------------------------------------------\nnew_receiver = ( delay ) ->\n  { spawn } = require 'child_process'\n  S             = new Controller()\n  cp            = spawn 'node', [ __filename, 'generate', '--delay', \"#{delay}\", ]\n  #.......................................................................................................\n  new_catcher = ( $key ) ->\n    return ( $value ) =>\n      S.send freeze { $key, $value, }\n      S.advance()\n  #.......................................................................................................\n  cp.stdout.on  'data', new_catcher '^stdout'\n  cp.stderr.on  'data', new_catcher '^stderr'\n  cp.on 'close', =>\n    help \"^7399^ receiver: CP closed\"\n    S.advance false\n  #.......................................................................................................\n  cp.on 'error', ( error ) ->\n    if has_finished\n      warn error\n      return null\n    has_finished = true\n    warn \"^3977^ receiver: reject_outer\"\n    reject_outer error\n  #.......................................................................................................\n  while not S.done\n    await S.ratchet; yield from S\n  help \"^8743^ receiver: no more data\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_receiver = ( delay ) -> new Promise ( resolve_outer, reject_outer ) =>\n  #---------------------------------------------------------------------------------------------------------\n  SP = require 'steampipes'\n  { $\n    $watch\n    $drain }  = SP.export()\n  #---------------------------------------------------------------------------------------------------------\n  $split_channels = ->\n    splitliners = {}\n    last        = Symbol 'last'\n    return $ { last, }, ( d, send ) =>\n      debug '^3334^', d\n      { $key, $value, } = d\n      unless ( ctx = splitliners[ $key ] )?\n        ctx = splitliners[ $key ] = SL.new_context()\n      if d is last\n        send ( freeze { $key, $value, } ) for $value from SL.flush ctx\n        return null\n      send ( freeze { $key, $value, } ) for $value from SL.walk_lines ctx, $value\n      return null\n  #---------------------------------------------------------------------------------------------------------\n  source      = SP.new_push_source()\n  pipeline    = []\n  pipeline.push source\n  pipeline.push $split_channels()\n  pipeline.push $watch ( d ) -> urge d\n  pipeline.push $drain ->\n    help \"^3776^ pipeline: finished\"\n    return resolve_outer()\n  SP.pull pipeline...\n  #.........................................................................................................\n  for await x from new_receiver delay\n    # whisper \"^6786^ sending #{( rpr x )[ .. 50 ]}...\"\n    source.send x\n  whisper \"^6786^ calling source.end()\"\n  source.end()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ncli = -> new Promise ( done ) =>\n  #.........................................................................................................\n  runner = ( d ) =>\n    delay = d.verdict.parameters.delay ? 0\n    switch d.verdict.cmd\n      when 'generate' then await generate_lines_of_text delay\n      when 'receive'  then await demo_receiver delay\n      else throw new Error \"^cli@33336^ unknown command #{rpr d.verdict.cmd}\"\n    done()\n  #.........................................................................................................\n  jobdefs =\n    commands:\n      #.....................................................................................................\n      'generate':\n        description:  \"generate series of words in different speeds\"\n        flags:\n          'delay':  { alias: 'd', type: Number, description: \"seconds to pause between each chunk of data\", }\n        runner: runner\n      #.....................................................................................................\n      'receive':\n        description:  \"spawn subprocess and process signals it emits\"\n        flags:\n          'delay':  { alias: 'd', fallback: null, type: Number, description: \"seconds to pause between each chunk of data\", }\n        runner: runner\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_receiver()\n  await cli()\n\n\n"
  ]
}