{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/event-emitter-as-async-generator/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'EVENTS-AS-GENERATOR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype()\nMIXA                      = require 'mixa'\nSL                        = require 'intertext-splitlines'\n\n\n#-----------------------------------------------------------------------------------------------------------\n# resolve_project_path = ( path ) -> PATH.resolve PATH.join __dirname, '../../..', path\n\n#-----------------------------------------------------------------------------------------------------------\ngenerate_lines_of_text = ( pause ) -> new Promise ( done ) =>\n  process.stdout.write \"generating lines with pause: #{rpr pause}\\n\"\n  sleep = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n  text  = \"\"\"just a generator demo\"\"\"\n  if module is require.main then do =>\n    process.stdout.write 'helo' + '\\n'\n    words = text.split /\\s+/\n    for word in words\n      process.stdout.write '\\n'\n      process.stdout.write word\n      if pause isnt 0\n        await sleep pause\n    process.stderr.write \"and hello over the other channel!\\n\"\n\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_receiver = ( pause ) -> new Promise ( resolve_outer, reject_outer ) =>\n  #---------------------------------------------------------------------------------------------------------\n  g = ->\n    ### thx to https://stackoverflow.com/a/59347615/7568091 ###\n    { spawn } = require 'child_process'\n    has_finished  = false\n    results       = []\n    resolve       = () => null\n    promise       = new Promise ( r ) => resolve = r\n    done          = false\n    cp            = spawn 'node', [ __filename, 'generate', '--pause', \"#{pause}\", ]\n    splitliners   = {}\n    #.......................................................................................................\n    new_catcher = ( $key ) ->\n      splitliners[ $key ] = SL.new_context()\n      return ( data ) =>\n        for $value from SL.walk_lines splitliners[ $key ], data\n          results.push Object.freeze { $key, $value, }\n        resolve()\n        promise = new Promise ( r ) => resolve = r\n    #.......................................................................................................\n    cp.stdout.on  'data',   new_catcher '^stdout'\n    cp.stderr.on  'data',   new_catcher '^stderr'\n    debug '^1776^', splitliners\n    #.......................................................................................................\n    cp.stdout.on  'end',    ->\n      $key = '^stdout'\n      for $value from SL.flush splitliners[ $key ]\n        results.push Object.freeze { $key, $value, }\n      resolve()\n      promise = new Promise ( r ) => resolve = r\n    #.......................................................................................................\n    cp.stderr.on  'end',    ->\n      $key = '^stderr'\n      for $value from SL.flush splitliners[ $key ]\n        results.push Object.freeze { $key, $value, }\n      resolve()\n      promise = new Promise ( r ) => resolve = r\n    #.......................................................................................................\n    cp.on 'error', ( error ) ->\n      if has_finished\n        warn error\n        return null\n      has_finished = true\n      reject_outer error\n    #.......................................................................................................\n    cp.on 'close', =>\n      done = true\n    #.......................................................................................................\n    while not done\n      await promise\n      # debug '^334455^', rpr results\n      for x from results\n        yield x\n      results = []\n  #---------------------------------------------------------------------------------------------------------\n  SP = require 'steampipes'\n  { $\n    $watch\n    $drain }  = SP.export()\n  source      = SP.new_push_source()\n  pipeline    = []\n  pipeline.push source\n  # pipeline.push SP.$split()\n  pipeline.push $watch ( d ) -> urge d\n  pipeline.push $drain -> done()\n  SP.pull pipeline...\n  for await x from g()\n    source.send x\n  #.........................................................................................................\n  unless has_finished\n    has_finished = true\n    return resolve_outer()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ncli = -> new Promise ( done ) =>\n  #.........................................................................................................\n  runner = ( d ) =>\n    pause = d.verdict.parameters.pause ? 0\n    switch d.verdict.cmd\n      when 'generate' then await generate_lines_of_text pause\n      when 'receive'  then await demo_receiver pause\n      else throw new Error \"^cli@33336^ unknown command #{rpr d.verdict.cmd}\"\n    done()\n  #.........................................................................................................\n  jobdefs =\n    commands:\n      #.....................................................................................................\n      'generate':\n        description:  \"generate series of words in different speeds\"\n        flags:\n          'pause':  { alias: 'p', type: Number, description: \"seconds to pause between each chunk of data\", }\n        runner: runner\n      #.....................................................................................................\n      'receive':\n        description:  \"spawn subprocess and process signals it emits\"\n        flags:\n          'pause':  { alias: 'p', fallback: null, type: Number, description: \"seconds to pause between each chunk of data\", }\n        runner: runner\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_receiver()\n  await cli()\n\n\n"
  ]
}