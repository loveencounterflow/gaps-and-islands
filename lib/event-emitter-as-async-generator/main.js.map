{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/event-emitter-as-async-generator/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'EVENTS-AS-GENERATOR'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n# FS                        = require 'fs'\ntypes                     = new ( require 'intertype' ).Intertype()\nMIXA                      = require 'mixa'\nSL                        = require 'intertext-splitlines'\n\n### thx to https://stackoverflow.com/a/59347615/7568091\n\nSeems to be working so far.\n\ni.e. you create a dummy promise like in Khanh's solution so that you can wait for the first result, but then\nbecause many results might come in all at once, you push them into an array and reset the promise to wait\nfor the result (or batch of results). It doesn't matter if this promise gets overwritten dozens of times\nbefore its ever awaited.\n\nThen we can yield all the results at once with yield* and flush the array for the next batch.\n\n###\n\n\n#-----------------------------------------------------------------------------------------------------------\ngenerate_lines_of_text = ( pause ) -> new Promise ( done ) =>\n  process.stdout.write \"generating lines with pause: #{rpr pause}\\n\"\n  sleep = ( dts ) -> new Promise ( done ) => setTimeout done, dts * 1000\n  text  = \"\"\"just a generator demo\"\"\"\n  if module is require.main then do =>\n    process.stdout.write 'helo' + '\\n'\n    words = text.split /\\s+/\n    for word in words\n      process.stdout.write '\\n'\n      process.stdout.write word\n      if pause isnt 0\n        await sleep pause\n    process.stderr.write \"and hello over the other channel!\\n\"\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Controller # extends Object\n  constructor: ->\n    @collector            = []\n    @[ Symbol.iterator ]  = -> yield from @collector; @collector = []\n    @_resolve             = ->\n    @done                 = false\n    @send                 = _send.bind @\n    @advance              = _advance.bind @\n    @ratchet              = new Promise ( resolve ) => @_resolve = resolve\n    return null\n#...........................................................................................................\n_send     = ( d ) -> @collector.push d\n_advance  = -> @_resolve(); @ratchet = new Promise ( resolve ) => @_resolve = resolve\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_receiver = ( pause ) -> new Promise ( resolve_outer, reject_outer ) =>\n  #---------------------------------------------------------------------------------------------------------\n  g = ->\n    { spawn } = require 'child_process'\n    S             = new Controller()\n    debug '^3328345^', S\n    has_finished  = false\n    cp            = spawn 'node', [ __filename, 'generate', '--pause', \"#{pause}\", ]\n    splitliners   = {}\n    #.......................................................................................................\n    new_catcher = ( $key ) ->\n      splitliners[ $key ] = SL.new_context()\n      return ( data ) =>\n        for $value from SL.walk_lines splitliners[ $key ], data\n          S.send Object.freeze { $key, $value, }\n        S.advance()\n    #.......................................................................................................\n    new_ender = ( $key ) ->\n      return ->\n        for $value from SL.flush splitliners[ $key ]\n          S.send Object.freeze { $key, $value, }\n        S.advance()\n    #.......................................................................................................\n    cp.stdout.on  'data', new_catcher '^stdout'\n    cp.stderr.on  'data', new_catcher '^stderr'\n    cp.stdout.on  'end',  new_ender   '^stdout'\n    cp.stderr.on  'end',  new_ender   '^stderr'\n    #.......................................................................................................\n    cp.on 'error', ( error ) ->\n      if has_finished\n        warn error\n        return null\n      has_finished = true\n      reject_outer error\n    #.......................................................................................................\n    cp.on 'close', => S.done = true\n    #.......................................................................................................\n    while not S.done then await S.ratchet; yield from S # .collector;\n  #---------------------------------------------------------------------------------------------------------\n  SP = require 'steampipes'\n  { $\n    $watch\n    $drain }  = SP.export()\n  source      = SP.new_push_source()\n  pipeline    = []\n  pipeline.push source\n  # pipeline.push SP.$split()\n  pipeline.push $watch ( d ) -> urge d\n  pipeline.push $drain -> done()\n  SP.pull pipeline...\n  for await x from g()\n    source.send x\n  #.........................................................................................................\n  unless has_finished\n    has_finished = true\n    return resolve_outer()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ncli = -> new Promise ( done ) =>\n  #.........................................................................................................\n  runner = ( d ) =>\n    pause = d.verdict.parameters.pause ? 0\n    switch d.verdict.cmd\n      when 'generate' then await generate_lines_of_text pause\n      when 'receive'  then await demo_receiver pause\n      else throw new Error \"^cli@33336^ unknown command #{rpr d.verdict.cmd}\"\n    done()\n  #.........................................................................................................\n  jobdefs =\n    commands:\n      #.....................................................................................................\n      'generate':\n        description:  \"generate series of words in different speeds\"\n        flags:\n          'pause':  { alias: 'p', type: Number, description: \"seconds to pause between each chunk of data\", }\n        runner: runner\n      #.....................................................................................................\n      'receive':\n        description:  \"spawn subprocess and process signals it emits\"\n        flags:\n          'pause':  { alias: 'p', fallback: null, type: Number, description: \"seconds to pause between each chunk of data\", }\n        runner: runner\n  #.........................................................................................................\n  MIXA.run jobdefs, process.argv\n  return null\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_receiver()\n  await cli()\n\n\n"
  ]
}