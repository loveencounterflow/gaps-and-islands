{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nGUY                       = require 'guy'\n{ alert\n  debug\n  help\n  info\n  plain\n  praise\n  urge\n  warn\n  whisper }               = GUY.trm.get_loggers 'GAPS-AND-ISLANDS'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n#...........................................................................................................\nPATH                      = require 'node:path'\nFSP                       = ( require 'node:fs' ).promises\nPGT                       = require 'paragate'\njoin                      = ( me, P...  ) -> PATH.resolve PATH.join me.base_path, P...\nread                      = ( me, path  ) -> await FSP.readFile path, { encoding: 'utf-8', }\nclear                     = ( me        ) -> await FSP.writeFile me.target_path, ''\nwrite                     = ( me, text  ) -> await FSP.appendFile me.target_path, text.toString()\ncomment                   = ( text      ) -> '<!-- ' + ( text.toString().replace /--/g, '-_' ) + ' -->\\n'\nunquote                   = ( text      ) -> text.replace /^(['\"])(.*)\\1$/, '$2'\n\n#-----------------------------------------------------------------------------------------------------------\n@interpret_inserts = ( me, token ) ->\n  for d in PGT.HTML.grammar.parse token.text\n    switch d.$key\n      when '<document', '>document' then null\n      when '^text'\n        await write me, d.text\n      when '^tag'\n        unless d.name is 'insert'\n          await write me, d.text\n          continue\n        # await write me, comment d.text\n        urge '^554^', \"inserting #{d.atrs.src}\"\n        path  = PATH.join me.base_path, unquote d.atrs.src ### TAINT should be done by HTML parser ###\n        await write me, await read me, path\n      else throw new Error \"^4776^ unknown token $key #{rpr d.$key}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@compile_readme = ->\n  me = {}\n  me.base_path    = PATH.resolve PATH.join __dirname, '..'\n  me.source_path  = join me, 'main.md'\n  me.target_path  = join me, 'README.md'\n  me.source       = await read me, me.source_path\n  #.........................................................................................................\n  await clear me\n  for d in PGT.RXWS.grammar.parse me.source\n    switch d.$key\n      when '<document', '>document' then null\n      when '^blank'\n        await write me, d.text\n      when '^block'\n        if d.text.startsWith '<insert'\n          await @interpret_inserts me, d\n          continue\n        await write me, d.text\n      else throw new Error \"^4776^ unknown token $key #{rpr d.$key}\"\n  return me\n\n\n############################################################################################################\nif module is require.main then do =>\n  await @compile_readme()\n\n"
  ]
}